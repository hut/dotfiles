snippet doctest
	if __name__ == '__main__':
		import doctest
		doctest.testmod()
snippet ostruct
	class ostruct(dict):
		def __init__(self, *args, **keywords):
			dict.__init__(self, *args, **keywords)
			self.__dict__ = self
snippet pprint
	import pprint; pprint.pprint(${1})
snippet csv
	import csv
	writer = csv.writer(open("file2.csv", "wb"), delimiter=';', quoting=csv.QUOTE_MINIMAL)
	for entry in csv.reader(open("file.csv", "rb")):
		data[entry[1]] = entry[0]
		writer.writerow(entry)
	
	dictwriter = csv.DictWriter(csvfile, fieldnames=['a', 'b'])
	dictwriter.writeheader()
	for item in [dict(a=1,b=2), dict(a=3,b=4)]:
		dictwriter.writerow(item)
		
snippet arg
	import argparse
	parser = argparse.ArgumentParser(description='${0}')
	parser.add_argument('-x', '--long', metavar='N', type=int, default=1, help='foo')
	parser.add_argument('-d', '--days', nargs='+', default=['a', 'b'], dest='days', type=lambda s: s + "day")

snippet json
	import json
	json.loads(json.dumps(dict()))
	json.dump(dict(), open(filename, 'w'), indent=2)

snippet #!
	#!/usr/bin/python
	import os.path
	import sys
	import re
	import time
	import argparse


	def main():
		default_logfile_name = '%s_%s.log' % (os.path.basename(__file__), time.strftime('%Y-%m-%dT%H%M%S'))
		parser = argparse.ArgumentParser()  # description=sys.modules[__name__].__doc__.strip())
		parser.add_argument('-o', '--logfile', type=str, default=default_logfile_name)
		parser.add_argument('-v', '--verbose', action='store_true', default=False)
		parser.add_argument('-q', '--quiet', action='store_true', default=False)
		parser.add_argument('positionals', nargs='*')
		args = parser.parse_args()


	if __name__ == '__main__':
		main()
snippet ifmain
	if __name__ == '__main__':
		main()
snippet akw
	*args, **kwargs)
snippet input
	import sys
	if sys.version[0] == '3':
		raw_input = input


snippet os.walk
	for dirpath, dirnames, filenames in os.walk(${1}):
snippet md5
	import hashlib
	hash = hashlib.md5('sometext').hexdigest()
snippet stack
	import traceback, sys
	traceback.print_stack(f=sys.stderr)
