#!/usr/bin/python

import math
import os.path
import datetime
import random
import subprocess
import time
import sys
import socket

PLAN_PATH = "~/sync/notes/vimwiki/plan.wiki" # "~/.plan"
MAX_LOOKAHEAD_DAYS = 92#31
MAX_WEEKS_TO_DISPLAY = 15
COLUMN_WIDTH = 8

def clr(string, fg=None, bg=None):
    color = []
    if fg: color.append("38;5;%s" % fg)
    if bg: color.append("48;5;%s" % bg)
    return "\033[%sm%s\033[0m" % (";".join(color), string)

def sleephour(weekday):
    assert weekday in range(0,7)
    if weekday == 4: #friday
        return 26.5 + 24*2
    elif weekday == 5: #saturday
        return 26.5 + 24
    else:
        return 26.5

CALENDAR = True
MOTD = False
CRAP = False
CLOCK = True
TIMEZONES = [
    ('LA', 'America/Los_Angeles'),
    ('NY', 'America/New_York'),
    ('UTC', 'Europe/Greenwich'),
    ('\033[38;5;203mDE', 'Europe/Berlin'),
    #('MOS', 'Europe/Moscow'),
    #('CH', 'Asia/Hong_Kong'),
    #('JP', 'Asia/Tokyo'),
]

TR = "\u2510"
BR = "\u2518"
BL = "\u2514"
TL = "\u250C"
H = "\u2500"
V = "\u2502"
JT = "\u252C"
JR = "\u2524"
JL = "\u251C"
JB = "\u2534"
JC = "\u253C"
UNDERLINE = ""
#UNDERLINE = "\u0332"
ETC = "\u2026"

today = datetime.date.today()

if CALENDAR:
    import asciicalendar
    asciicalendar.main()

if MOTD:
    lines = open(os.path.expanduser('~/sync/edge/quotes/motd'), "r").read().split("\n")
    lines = "\n".join(l for l in lines if not l.startswith("#"))
    quotes = lines.split("\n\n")
    print(clr(random.choice(quotes).rstrip("\n"), fg=CLR_QUOTE))
#else:
    #print()

if CRAP:
    wcl = lambda f: open(os.path.expanduser("~/sync/edge/"+f), "r").read().count("\n")
    sc, fl = wcl("recent_successes"), wcl("recent_failures")
    limit, largest = 10, max(sc, fl)
    if largest > limit:
        sc *= limit / largest
        fl *= limit / largest
    print(clr("+" * math.ceil(sc), fg='2'))
    print(clr("-" * math.ceil(fl), fg='1'))

if CLOCK:
    fg = 255 if socket.gethostname().startswith('lemming') else 76
    def get_suffix(d):
        return 'th' if 11<=d<=13 else {1:'st',2:'nd',3:'rd'}.get(d%10, 'th')
    suffix = get_suffix(int(time.strftime('%d')))
    free_mem = int(open("/proc/meminfo", "r").read().split("\n")[2].split()[1]) / 1024**2
    load = open("/proc/loadavg", "r").read().split()[1]
    date = time.strftime("%A, %B %d" + suffix + ", w=%W, d=%j, %s")
    print(clr("{date} free={free_mem:.1f}G load={load}" \
            .format(int(time.time()), **locals()), fg=fg))

if TIMEZONES:
    fg = 255 if socket.gethostname().startswith('lemming') else 76
    output = []
    old_zone = os.environ.get("TZ", None)
    for name, zone in TIMEZONES:
        os.environ['TZ'] = zone
        time.tzset()
        output.append(name + time.strftime("=%H:%M") + "\033[38;5;%dm" % fg)
    if old_zone is None:
        del os.environ['TZ']
    else:
        os.environ['TZ'] = old_zone
    time.tzset()

    #hour = (float(time.strftime("%H")) + float(time.strftime("%M")) / 60)
    #output.append("+%.1f" % (sleephour(today.weekday()) - hour))

    print(clr("  ".join(output), fg=fg))

if os.path.exists(os.path.expanduser("~/bin/repeat")):
    try:
        tasks = subprocess.check_output(["repeat", "--pretty"])
    except subprocess.CalledProcessError:
        pass
    else:
        sys.stdout.write(clr("---> ", fg=101) + tasks.decode('utf-8'))
        sys.stdout.flush()

if os.path.exists(os.path.expanduser("~/repos/dotfiles")):
    subprocess.call('''
        cd ~/repos/dotfiles;
        git -c color.status=always status -s | sed 's/^\(..[^ ]* \)/\\1~\/dot\//';
        git log origin/master..master --oneline | cat;
    ''', shell=True)

if os.path.exists(os.path.expanduser("~/me")):
    subprocess.call('''
        cd ~/me;
        git -c color.status=always status -s | sed 's/^\(..[^ ]* \)/\\1~\/me\//';
    ''', shell=True)
